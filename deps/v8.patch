diff --git a/include/v8.h b/include/v8.h
index e19f586..fa2b487 100644
--- a/include/v8.h
+++ b/include/v8.h
@@ -640,7 +640,7 @@ template <class T> class Persistent // NOLINT
    * cell remain and IsEmpty will still return false.
    */
   // TODO(dcarney): deprecate
-  V8_INLINE(void Dispose(Isolate* isolate)) { Dispose(); }
+  V8_INLINE(void Dispose(Isolate* isolate)) { (void)isolate; Dispose(); }
 
   /**
    * Make the reference to this object weak.  When only weak handles
@@ -684,7 +684,7 @@ template <class T> class Persistent // NOLINT
   V8_INLINE(void ClearWeak());
 
   // TODO(dcarney): deprecate
-  V8_INLINE(void ClearWeak(Isolate* isolate)) { ClearWeak(); }
+  V8_INLINE(void ClearWeak(Isolate* isolate)) { (void)isolate; ClearWeak(); }
 
   /**
    * Marks the reference to this object independent. Garbage collector is free
@@ -695,7 +695,7 @@ template <class T> class Persistent // NOLINT
   V8_INLINE(void MarkIndependent());
 
   // TODO(dcarney): deprecate
-  V8_INLINE(void MarkIndependent(Isolate* isolate)) { MarkIndependent(); }
+  V8_INLINE(void MarkIndependent(Isolate* isolate)) { (void)isolate; MarkIndependent(); }
 
   /**
    * Marks the reference to this object partially dependent. Partially dependent
@@ -723,7 +723,7 @@ template <class T> class Persistent // NOLINT
   V8_INLINE(bool IsNearDeath() const);
 
   // TODO(dcarney): deprecate
-  V8_INLINE(bool IsNearDeath(Isolate* isolate) const) { return IsNearDeath(); }
+  V8_INLINE(bool IsNearDeath(Isolate* isolate) const) { (void)isolate; return IsNearDeath(); }
 
   /** Returns true if the handle's reference is weak.  */
   V8_INLINE(bool IsWeak() const);
@@ -3577,6 +3577,7 @@ class V8EXPORT Extension {  // NOLINT
   virtual ~Extension() { }
   virtual v8::Handle<v8::FunctionTemplate>
       GetNativeFunction(v8::Handle<v8::String> name) {
+    (void)name;
     return v8::Handle<v8::FunctionTemplate>();
   }
 
@@ -4131,7 +4132,7 @@ typedef void (*JitCodeEventHandler)(const JitCodeEvent* event);
 class V8EXPORT ExternalResourceVisitor {  // NOLINT
  public:
   virtual ~ExternalResourceVisitor() {}
-  virtual void VisitExternalString(Handle<String> string) {}
+  virtual void VisitExternalString(Handle<String> string) { (void)string; }
 };
 
 
@@ -4143,7 +4144,7 @@ class V8EXPORT PersistentHandleVisitor {  // NOLINT
   virtual ~PersistentHandleVisitor() {}
 #ifdef V8_USE_OLD_STYLE_PERSISTENT_HANDLE_VISITORS
   virtual void VisitPersistentHandle(Persistent<Value> value,
-                                     uint16_t class_id) {}
+                                     uint16_t class_id) { (void)value; (void)class_id; }
 #else
   virtual void VisitPersistentHandle(Persistent<Value>* value,
                                      uint16_t class_id) {}
@@ -4158,7 +4159,7 @@ class V8EXPORT PersistentHandleVisitor {  // NOLINT
  */
 class V8EXPORT AssertNoGCScope {
 #ifndef DEBUG
-  V8_INLINE(AssertNoGCScope(Isolate* isolate)) {}
+  V8_INLINE(AssertNoGCScope(Isolate* isolate)) { (void)isolate; }
 #else
   AssertNoGCScope(Isolate* isolate);
   ~AssertNoGCScope();
@@ -5157,6 +5158,8 @@ class V8EXPORT OutputStream {  // NOLINT
    * will not be called in case writing was aborted.
    */
   virtual WriteResult WriteHeapStatsChunk(HeapStatsUpdate* data, int count) {
+    (void)data;
+    (void)count;
     return kAbort;
   };
 };
@@ -5406,13 +5409,13 @@ class Internals {
     return I::ReadField<T>(embedder_data, value_offset);
   }
 
-  V8_INLINE(static bool CanCastToHeapObject(void* o)) { return false; }
-  V8_INLINE(static bool CanCastToHeapObject(Context* o)) { return true; }
-  V8_INLINE(static bool CanCastToHeapObject(String* o)) { return true; }
-  V8_INLINE(static bool CanCastToHeapObject(Object* o)) { return true; }
-  V8_INLINE(static bool CanCastToHeapObject(Message* o)) { return true; }
-  V8_INLINE(static bool CanCastToHeapObject(StackTrace* o)) { return true; }
-  V8_INLINE(static bool CanCastToHeapObject(StackFrame* o)) { return true; }
+  V8_INLINE(static bool CanCastToHeapObject(void* o)) { (void)o; return false; }
+  V8_INLINE(static bool CanCastToHeapObject(Context* o)) { (void)o; return true; }
+  V8_INLINE(static bool CanCastToHeapObject(String* o)) { (void)o; return true; }
+  V8_INLINE(static bool CanCastToHeapObject(Object* o)) { (void)o; return true; }
+  V8_INLINE(static bool CanCastToHeapObject(Message* o)) { (void)o; return true; }
+  V8_INLINE(static bool CanCastToHeapObject(StackTrace* o)) { (void)o; return true; }
+  V8_INLINE(static bool CanCastToHeapObject(StackFrame* o)) { (void)o; return true; }
 };
 
 }  // namespace internal
@@ -5475,6 +5478,7 @@ Persistent<T> Persistent<T>::New(Handle<T> that) {
 
 template <class T>
 Persistent<T> Persistent<T>::New(Isolate* isolate, Handle<T> that) {
+  (void)isolate;
   return New(Isolate::GetCurrent(), that.val_);
 }
 
@@ -5559,6 +5563,7 @@ template <class T>
 void Persistent<T>::MakeWeak(Isolate* isolate,
                              void* parameters,
                              NearDeathCallback callback) {
+  (void)isolate;
   V8::MakeWeak(reinterpret_cast<internal::Object**>(this->val_),
                parameters,
                NULL,
